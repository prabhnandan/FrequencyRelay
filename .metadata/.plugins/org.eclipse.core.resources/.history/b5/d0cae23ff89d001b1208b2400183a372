#include <stdio.h>
#include <unistd.h>
#include <system.h>
#include <stdlib.h>
#include <altera_avalon_pio_regs.h>
#include <stdbool.h>
#include <math.h>
#include <stddef.h>
#include <string.h>
#include "alt_types.h"
#include "io.h"
#include "altera_up_avalon_ps2.h"
#include "altera_up_ps2_keyboard.h"
#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_pixel_buffer_dma.h"
#include "sys/alt_irq.h"
#include "freertosheader.h"

//Queues
QueueHandle_t ADCQ;
QueueHandle_t FreqDataQ;
QueueHandle_t TimerQ;
QueueHandle_t ShedQ;
QueueHandle_t WallSwitchQ;
QueueHandle_t LEDQ;
QueueHandle_t KeyboardQ;

//Macros
#define TASK_STACKSIZE    	2048
#define DATA_SIZE	100
#define MIN_FREQ			45.0	//minimum frequency to draw
#define MIN_ROC				60.0	//max/min RoC to draw
#define STD_QUEUE_SIZE  	30 		//standard queue size

#define FrequencyCalculate_PRIORITY  1 //Executes on ADCQ message (Sleeps when no ADCQ message)
#define FrequencyCheck_PRIORITY      2 //Executes on FreqCheckQ message (Sleeps when no FreqCheckQ message)
#define WallSwitchPoll_PRIORITY      3 //Executes every 100ms (Sleeps every 100ms)
#define UpdateDisplay_PRIORITY       5 //Executes every 10ms (Sleeps every 10ms)
#define DisplayLEDs_PRIORITY 		 4 //Executes on LEDQ message (Sleeps when no LEDQ message)
#define ControlLoads_PRIORITY        6 //Executes every 1ms
#define Timer_PRIORITY     		     7 //Executes every 10ms (Sleeps every 10ms)

//Timer handle
TimerHandle_t timer;

//Structures
struct Sample{
	double sampleRoC;
	double sampleADC;
};

struct LED{
	unsigned int red;
	unsigned int green;
};

//Global variables
double fData[DATA_SIZE]={0};
double rocData[DATA_SIZE]={0};
double fThresh = 48.5; 				// Frequency threshold (Hz)
double rocThresh = 25; 				// Rate of change threshold (Hz/s)
unsigned int stableBoolean = 0;
unsigned int modeStatus = 0;
unsigned int firstShedTime = 0;				//Updated when system changes from stable to unstable (measured in ms). Used to calculate time to 1st load shed.
unsigned int maintenanceFlag;

void FrequencyISR(){
	unsigned int freq = IORD(FREQUENCY_ANALYSER_BASE,0);
	xQueueSendToBackFromISR(ADCQ, &freq, 0);
}

void FrequencyAnalyser(){
	unsigned int newADC = 0;
	unsigned int pos = 0;
	unsigned int samples[2] = {0};
	unsigned int i = 0;
	double avgADC = 0;
	struct Sample sample;
	double prevADC = 0;
	double prevSample = 0;

	while(1) {
		xQueueReceive(ADCQ, &newADC, portMAX_DELAY);

		avgADC= (double) (prevADC + newADC) / 2;

		//Frequency calculation
		sample.sampleADC = 16000 / (double) newADC;
		fData[pos] = sample.sampleADC;

		if (prevSample == 0 ) sample.sampleRoC = 0;
		else sample.sampleRoC = ((sample.sampleADC - prevSample) * 16000) / avgADC;

		rocData[pos] = sample.sampleRoC;

		prevADC = newADC;
		prevSample = sample.sampleADC;

		xQueueSendToBack(FreqDataQ,(void *) &sample, 0); //Send latest position of fData to FreqCheck task
		//		xQueueSendToBack(VGAQ, &pos, 0); //Send latest position of fData to UpdateDisplay through VGAQ
		pos = (pos + 1) % DATA_SIZE; //Going through circular array
	}
}

void StabilityAnalyser(){
	struct Sample sample;
	while (1) {
		xQueueReceive(FreqDataQ, &(sample), portMAX_DELAY);
		if (sample.sampleADC < fThresh) {
			stableBoolean = 1; //Unstable
		} else if (fabs(sample.sampleRoC) > rocThresh) {
			stableBoolean = 1; // unstable
		} else {
			stableBoolean = 0;// stable
		}

		if ((stableBoolean == 1) && (modeStatus == 0)) {
			firstShedTime = xTaskGetTickCount();//start timer for first load shed.
			xQueueSend(ShedQ, &stableBoolean, 0); //start shedding
		}
		xQueueSend(TimerQ, &stableBoolean, 0);
	}
}

void TimerReset(){
	unsigned int prevMode = modeStatus;
	unsigned int msg;
	while(1){
		xQueueReceive(TimerQ, msg, portMAX_DELAY);
		if(xTimerIsTimerActive(timer) == pdFALSE) { //Timer off
			if (modeStatus == 1) { //System unstable, start 500ms timer.
				xTimerReset(timer, 0);
				xTimerStart(timer, 0);
			}
		} else { //Timer on
			if((stableBoolean == 0) && (modeStatus == 0)) { //System stable
				xTimerStop(timer, 0);
				xTimerReset(timer, 0);
			} else if ((prevMode != stableBoolean) && (modeStatus == 1)) { //statusBoolean change during unstable mode
				xTimerReset(timer, 0);
				xTimerStart(timer, 0);
			} else if (modeStatus == 2) { //Maintenance mode & timer on
				xTimerStop(timer, 0);
				xTimerReset(timer, 0);
			}
		}
		prevMode = stableBoolean; //update previous status with new status
	}
}

void TimerISR(){
	unsigned int Shed = 0;
	if (stableBoolean == 1) { //Unstable -> shed
		Shed = 1;
	} else { //Stable -> Reconnect
		Shed = 0;
	}
	xQueueSend(ShedQ, &Shed, 0);
}

void MaintenanceISR(void* context, alt_u32 id){
	int PressedButton = 0;
	int temp = IORD_ALTERA_AVALON_PIO_EDGE_CAP(PUSH_BUTTON_BASE);
	PressedButton = IORD_ALTERA_AVALON_PIO_DATA(PUSH_BUTTON_BASE);
	if (temp && PressedButton == 6) { //0b110 (active low)
		if (modeStatus == 0){ //when system stable change to maintenance immediately
			modeStatus = 2;
		} else if (modeStatus == 2) { //when in maintenance change to stable immediately
			modeStatus = 0;
		} else {
			/*system is unstable. Must wait until system is stable. Thus sets flag to indicate
			 *that the user wants to be in maintenance mode as soon as the system is stable.
			 */
			maintenanceFlag = 1;
		}
	}
	//Clearing capture registers
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PUSH_BUTTON_BASE, 0x7);
}

void LoadManager(){
	unsigned int RedLED = 0;	//total 26 LEDs = 26-bits. Unsigned int is 16-bits so need to use long.
	unsigned int GreenLED = 0;
	unsigned int SwitchValues = 0; //18 switches = 18-bits.
	unsigned int shed = 0; //shed or reconnect
	unsigned int loads[5] = {0}; //loads already shed/reconnected
	//	unsigned int tempTime, endTime, diffTime, sumTime = 0, sumShed = 0; //time vars
	//	unsigned int cursor = 0; //cursor to loop through latest 5 times
	int i = 0; //May be negative as performing '--' operation thus int

	while (1) {

		//Shed/Reconnect logic
		if(uxQueueMessagesWaiting(ShedQ) != 0) {
			xQueueReceive(ShedQ, &shed, 0);
			if(RedLED != 0 || GreenLED !=0){
				switch (shed){
				case (0):
						for(i = 4; i >= 0; i--){
							if (loads[i] == 0){
								loads[i] = 1;
								break;
							}
						}
				break;
				case (1):
						for (i = 0; i < 6; i++){
							if (loads[i] == 1){
								loads[i] = 0;
								break;
							}
						}
				break;
				}
			}
//			if(LEDValues != 0) { //While there are loads switched on/shed
//				if (shed == 0) { //Reconnect shed loads
//					for(i = 4; i >= 0; i--) { //check highest priority shed load and reconnect it
//						if (shedLoads[i] == 1) {
//							//reconnect
//							shedLoads[i] = 0;
//							LEDValues |= (1 << (i+9)); //Reconnects by setting the RED led on
//							break;
//						}
//					}
//				} else { //Shed loads
//					for(i = 0; i < 6; i++) { //Lowest priority loads first to be shed
//						if( ((LEDValues >> 9) & (1 << i)) > 0) { //Load 'i' is on
//							shedLoads[i] = 1; //sheds the load.
//							break;
//						}
//					}
//				}
//			}
		}

		//Get switch values from WallSwitchPoll & sets LED values
		if(uxQueueMessagesWaiting(WallSwitchQ) != 0) {
			xQueueReceive(WallSwitchQ, &SwitchValues, 0);
			if (modeStatus == 0 || modeStatus ==2){
				for (int i = 0; i < 6; i++){
					if(SwitchValues & (1 << i))loads[i] = 1;
					else loads[i] = 0;
				}
			}
			else{
				for (int i = 0; i < 6; i++){
					if(!(SwitchValues & (1 << i)))loads[i] = 0;
				}
			}
//			if ((modeStatus == 0) || (modeStatus == 2)) { //System stable/maintenance
//				LEDValues = (SwitchValues << 9); //Turn on all RED while turning off all green
//			} else { //system unstable
//				LEDValues &= (SwitchValues << 9); //Only able to clear Red LEDs
//				for (i = 0; i < 9; i++) { //Enabling green & disabling red depending on loads shed
//					if (shedLoads[i] == 1) {
//						if ( ((SwitchValues) & (1 << i)) == 0) { //Load turned off manually
//							shedLoads[i] = 0;  //Load is no longer shed
//							LEDValues &= ~(1 << i); //Turn off Green LED
//						} else { //Load is shed, turn on green LED and off red.
//							LEDValues &= ~(1 << (i+9)); //turn off RED
//							LEDValues |= (1 << i); //turn on GREEN
//						}
//					}
//				}
//			}
		}
		struct LED led;
		unsigned int LEDValues;
		for (int i = 4 ; i>= 0; i--){
			RedLED += (loads[4-i] * pow(2 , i));
		}
		GreenLED = ~RedLED;
		RedLED = (RedLED << 5);

		//Check if loads shed or not to set/change the system mode.
		//		xSemaphoreTake(shared_resource_sem,portMAX_DELAY); //Needs semaphore as changing modeStatus (ISR can change it too)
		for(i = 0; i < 6; i++) {
			if((loads[i] == 1) && (modeStatus != 2)) { //a load is shed & not maintenance mode
				modeStatus = 1; //mode is unstable
				break;
			} else if ((i == 5) && (loads[5] == 0)) {
				//All loads have been reconnected
				if(maintenanceFlag == 1) { //Change to maintenance mode if flag was set
					maintenanceFlag = 0;
					modeStatus = 2;
				} else if (modeStatus != 2) { //Change to stable when system is not in maintenance
					modeStatus = 0;
				}
			}
		}
		//		xSemaphoreGive(shared_resource_sem);

		//		endTime = xTaskGetTickCount(); //end time from when threshold exceeded till the Load shed
		//		diffTime = endTime-startTime; //time is measured in ms
		//
		//		//Calculates min/max/avg times & updates the 5 most recent first load shed times
		//		if ((tempTime != startTime) && (diffTime >= 0)) { //startTime has changed = first load shed happening again
		//			//minimum time
		//			if (diffTime < minTime) {
		//				minTime = diffTime;
		//			}
		//
		//			//maximum time
		//			if (diffTime > maxTime) {
		//				maxTime = diffTime;
		//			}
		//
		//			//avg time
		//			sumTime += diffTime;
		//			sumShed++;
		//			avgTime = (double)sumTime/sumShed;
		//
		//
		//			//latest 5 measurements
		//			if (cursor == 5) { //overflow
		//				recentShedTimes[0] = recentShedTimes[1];
		//				recentShedTimes[1] = recentShedTimes[2];
		//				recentShedTimes[2] = recentShedTimes[3];
		//				recentShedTimes[3] = recentShedTimes[4];
		//				recentShedTimes[4] = diffTime;
		//			} else {
		//				recentShedTimes[cursor] = diffTime;
		//				cursor++;
		//			}
		//
		//		}
		//		tempTime = startTime;
		xQueueSend(LEDQ, &LEDValues, 0);
		vTaskDelay(1);
	}

}

void WallSwitch(){
	unsigned int SwitchValue = 0;
	while(1) {
		SwitchValue = IORD_ALTERA_AVALON_PIO_DATA(SLIDE_SWITCH_BASE);
		SwitchValue &= (0x1F);
		xQueueSendToBack(WallSwitchQ, &SwitchValue, 0);
		vTaskDelay(50);
	}
}

void DisplayLed(){
	//Initial setup -- Clear LEDs & allocate space for LEDValues
	IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE, 0);
	IOWR_ALTERA_AVALON_PIO_DATA(RED_LEDS_BASE, 0);
	unsigned long LEDValues = 0; //unsigned long = 32 bits. There are 28 LEDs = 28 bits.

	while(1) {
		xQueueReceive(LEDQ, &LEDValues, portMAX_DELAY);
		IOWR_ALTERA_AVALON_PIO_DATA(RED_LEDS_BASE, (LEDValues >> 9)); //first 9 bits = Green LED thus shift right 9 for RED
		IOWR_ALTERA_AVALON_PIO_DATA(GREEN_LEDS_BASE, LEDValues);
	}
}

void SetupISR(){
	alt_irq_register(FREQUENCY_ANALYSER_IRQ, 0, FrequencyISR);
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PUSH_BUTTON_BASE, 0x7);
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PUSH_BUTTON_BASE, 0x1); //Only enable interrupt on first key
	alt_irq_register(PUSH_BUTTON_IRQ,NULL,MaintenanceISR);
	return;
}

void OSDataStructs(){
	ADCQ = xQueueCreate( STD_QUEUE_SIZE, sizeof( void* ) );
	//	VGAQ = xQueueCreate( VGA_QUEUE_SIZE, sizeof(unsigned int));
	ShedQ = xQueueCreate( STD_QUEUE_SIZE, sizeof( void* ) );
	WallSwitchQ = xQueueCreate(STD_QUEUE_SIZE, sizeof(unsigned int));
	LEDQ = xQueueCreate(STD_QUEUE_SIZE, sizeof(unsigned long));
	FreqDataQ = xQueueCreate( STD_QUEUE_SIZE, sizeof(struct Sample));
	TimerQ = xQueueCreate(STD_QUEUE_SIZE, sizeof(unsigned int));
	timer = xTimerCreate("timerM", 500, pdTRUE, NULL, TimerISR);
	return;
}

void CreateTasks(){
	xTaskCreate(DisplayLed, "DisplayLEDs", TASK_STACKSIZE, NULL, DisplayLEDs_PRIORITY, NULL);
	//	xTaskCreate(UpdateDisplay, "UpdateDisplay", configMINIMAL_STACK_SIZE, NULL, UpdateDisplay_PRIORITY, &PRVGADraw);
	xTaskCreate(WallSwitch, "WallSwitchPoll", TASK_STACKSIZE, NULL, WallSwitchPoll_PRIORITY, NULL);
	xTaskCreate(FrequencyAnalyser, "FrequencyCalculate", TASK_STACKSIZE, NULL, FrequencyCalculate_PRIORITY, NULL);
	xTaskCreate(StabilityAnalyser, "FrequencyCheck", TASK_STACKSIZE, NULL, FrequencyCheck_PRIORITY, NULL);
	xTaskCreate(TimerReset, "RTimer", TASK_STACKSIZE, NULL, Timer_PRIORITY, NULL);
	xTaskCreate(LoadManager, "ControlLoads", TASK_STACKSIZE, NULL, ControlLoads_PRIORITY, NULL);
	return;
}

int main(){
	SetupISR();
	OSDataStructs();
	CreateTasks();
	vTaskStartScheduler();
	for(;;);

	return 0;
}
